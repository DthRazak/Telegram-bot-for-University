from datetime import datetime
import requests
import misc.misc
import dbController as dbc
import re
from logger import msg_logger as logger


URL = 'https://api.telegram.org/bot{0}/'.format(misc.misc.token)
emoji = {1: '1\ufe0f\u20e3', 2: '2\ufe0f\u20e3', 3: '3\ufe0f\u20e3', 4: '4\ufe0f\u20e3', 5: '5\ufe0f\u20e3', \
         6: '6\ufe0f\u20e3', 7: '7\ufe0f\u20e3', 8: '8\ufe0f\u20e3', 9: '9\ufe0f\u20e3', 10: '\ud83d\udd1f'}
dayofweek = {'–ü–ù': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í–¢': '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–†': '–°–µ—Ä–µ–¥–∞', '–ß–¢': '–ß–µ—Ç–≤–µ—Ä', '–ü–¢': '–ü\'—è—Ç–Ω–∏—Ü—è'}
dowENUA = {'Monday': '–ü–ù', 'Tuesday': '–í–¢', 'Wednesday': '–°–†', 'Thursday': '–ß–¢', 'Friday': '–ü–¢'}


def sendMessage(chat_id, text, parse_mode='Markdown'):
    url = URL + 'sendMessage'
    answer = {'chat_id': chat_id, 'text': text, 'parse_mode': parse_mode}
    r = requests.post(url, json=answer)
    return r.json()


def sendButton(chat_id, text, reply):
    url = URL + 'sendMessage'
    answer = {'chat_id': chat_id, 'text': text, 'reply_markup': reply }
    r = requests.post(url, json = answer)
    return r.json()


def editCallbackMessage(chat_id, message_id, reply_markup):
    url = URL + 'editMessageReplyMarkup'
    answer = {'chat_id': chat_id, 'message_id': message_id, 'reply_markup': reply_markup}
    r = requests.post(url, json = answer)
    return r.json()


def addKeyboard(chat_id, text, keyboard):
    url = URL + 'sendMessage'
    reply = {'keyboard': keyboard, 'resize_keyboard' : True}
    answer = {'chat_id': chat_id, 'text': text, 'reply_markup': reply}
    r = requests.post(url, json = answer)
    return r.json()


def removeKeyboard(chat_id):
    url = URL + 'sendMessage'
    reply = {'remove_keyboard' : True}
    answer = {'chat_id': chat_id, 'text': 'bye', 'reply_markup': reply}
    r = requests.post(url, json = answer)
    return r.json()


def manageSimpleMessage(dataJson):
    try:
        chat_id = dataJson['message']['chat']['id']
        text = '–ù–∞–∂–∞–ª—å –∑–∞—Ä–∞–∑ —è –Ω–µ –≤–æ–ª–æ–¥—ñ—é —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º —ñ —Ç–æ–º—É —è –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
        sendMessage(chat_id, text)
    except KeyError:
        try:
            chat_id = dataJson['edited_message']['chat']['id']
            text = '–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á–∏—Å—å –ø–∏—Å–∞—Ç–∏ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫, –∞ –ø–æ—Ç—ñ–º –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)'
            logMsg = 'editedMessage: chat_id: {0}, message: {1}'.format(chat_id, dataJson['text'])
            logger.warning(logMsg)
            sendMessage(chat_id, text)
        except KeyError:
            logger.error('Some error happened!!!')
            pass


def manageBotCommand(dataJson):
    command = dataJson['message']['text']
    chat_id = dataJson['message']['chat']['id']
    if 'username' in dataJson['message']['chat']:
        username = dataJson['message']['chat']['username']
    else:
        username = 'NULL'

    if command == '/start':
        text = "–ü—Ä–∏–≤—ñ—Ç, —è –±–æ—Ç —Ç–≤–æ–≥–æ —É–ª—é–±–ª–µ–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É\n–ß–∏–º —è –º–æ–∂—É —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏?"
        keyboard = [[{'text': '–†–æ–∑–∫–ª–∞–¥'}], [{'text': '–ü–æ—à—É–∫ –≤–∏–∫–ª–∞–¥–∞—á–∞'}], [{'text': '–ü—Ä–æ—Ñ–∫–æ–º'}],
                    [{'text': '–Ü–Ω—à–µ'}, {'text': '–î–æ–ø–æ–º–æ–≥–∞'}]]
        addKeyboard(chat_id, text, keyboard)
        dbc.register_user(chat_id, username)
    # elif re.search(r'^\/register \w+-\d+$', command):
    #     group = command.split(' ')[1]
    #     try:
    #         username = dataJson['message']['from']['username']
    #     except KeyError:
    #         username = 'NULL'
    #     if not dbc.is_user_registered(chat_id):
    #         if dbc.register_user(chat_id, group, username):
    #             sendMessage(chat_id, '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ')
    #             logMsg = 'User registered chat_id: {0}'.format(chat_id)
    #             logger.info(logMsg)
    #         else:
    #             sendMessage(chat_id, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
    #     else:
    #         sendMessage(chat_id, '–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ')
    # elif command == '/deleteme':
    #     if dbc.is_user_registered(chat_id):
    #         dbc.delete_user(chat_id)
    #         sendMessage(chat_id, '–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–π—à–ª–æ —É—Å–ø—ñ—à–Ω–æ')
    #         logMsg = 'User was deleted chat_id: {0}'.format(chat_id)
    #         logger.info(logMsg)
    #     else:
    #         sendMessage(chat_id, '–í–∏ —â–µ –Ω–µ –±—É–ª–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ')
    else:
        text = "–ù–∞–∂–∞–ª—å —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏("
        sendMessage(chat_id, text)


def manageMainComand(dataJson):
    chat_id = dataJson['message']['chat']['id']
    message = dataJson['message']['text'].lower()
    if message == '—Ä–æ–∑–∫–ª–∞–¥':
        rawData = dbc.get_facultets()
        buttons = makeButtons('facultet_', 2, list(rawData.values()))
        sendButton(chat_id, '–ó—Ä–æ–±—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ —Å–≤—ñ–π –≤–∏–±—ñ—Ä', buttons)
    elif message == '–ø–æ—à—É–∫ –≤–∏–∫–ª–∞–¥–∞—á–∞':
        pass
        # TODO implement this method
    elif message == '–ø—Ä–æ—Ñ–∫–æ–º':
        pass
        # TODO implement this method to
    elif message == '—ñ–Ω—à–µ':
        pass
        # TODO and this)
    elif message == '–¥–æ–ø–æ–º–æ–≥–∞':
        text = "–Ø–∫—â–æ —É –≤–∞—Å —î —è–∫—ñ—Å—å –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –±–æ—Ç–∞, –∞–±–æ –≤–∏ –∑–Ω–∞–π—à–ª–∏ –Ω–µ–¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é" \
                " —Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É dth.razak@gmail.com"
        sendMessage(chat_id, text)


def manageCallbackQuery(dataJson):
    data = dataJson['callback_query']['data']
    chat_id = dataJson['callback_query']['message']['chat']['id']
    message_id = dataJson['callback_query']['message']['message_id']

    # –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤, –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤
    if re.search('facultet_\w+', data):
        callbackText = data.split('_')
        buttons = makeButtons(callbackText[1] + '_course_', 2, ['1', '2', '3', '4', '5', '6', '<< –ù–∞–∑–∞–¥'])
        editCallbackMessage(chat_id, message_id, buttons)

    # –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤, –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥—Ä—É–ø
    elif re.search(r'^\w+_course_[1-6]$', data):
        rawData = dbc.get_groups(data.split('_')[0], data[-1])
        groups = []
        for group in rawData:
            groups.append(group)
        groups.append('<< –ù–∞–∑–∞–¥')
        buttons = makeButtons(data + '_', 3, groups)
        editCallbackMessage(chat_id, message_id, buttons)

    # –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –≥—Ä—É–ø –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–Ω—è —Ç–∏–∂–Ω—è
    elif re.search(r'^\w+_course_[1-6]_\d+$', data):
        buttons = makeButtons(data + '_', 3, ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '<< –ù–∞–∑–∞–¥'])
        editCallbackMessage(chat_id, message_id, buttons)

    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤ –∑ –∫—É—Ä—Å—ñ–≤
    elif re.search('course_back', data):
        rawData = dbc.get_facultets()
        buttons = makeButtons('facultet_', 2, list(rawData.values()))
        editCallbackMessage(chat_id, message_id, buttons)

    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫—É—Ä—Å—ñ–≤ –∑ –≥—Ä—É–ø
    elif re.search(r'^\w+_course_[1-6]_back$', data):
        callbackText = data.split('_')[0]
        buttons = makeButtons(callbackText + '_course_', 2, ['1', '2', '3', '4', '5', '6', '<< –ù–∞–∑–∞–¥'])
        editCallbackMessage(chat_id, message_id, buttons)

    # –ü–µ—Ä–µ—Ö—ñ–¥ –∑ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è –¥–æ –≥—Ä—É–ø
    elif re.search(r'^\w+_course_[1-6]_\d+_back$', data):
        rawData = dbc.get_groups(data.split('_')[0], data.split('_')[2])
        groops = []
        for groop in rawData:
            groops.append(groop)
        groops.append('<< –ù–∞–∑–∞–¥')
        callbackText = data.split('_')[0] + '_' + data.split('_')[1] + '_' + data.split('_')[2] + '_'
        buttons = makeButtons(callbackText, 3, groops)
        editCallbackMessage(chat_id, message_id, buttons)

    elif re.search(r'^\w+_course_[1-6]_\d+_[^b]\w+$', data):
        day = data.split('_')[4]
        group_id = data.split('_')[3]
        group = dbc.get_group_by_id(group_id)
        try:
            username = dataJson['callback_query']['message']['chat']['username']
        except KeyError:
            username = ''
        logMsg = 'Timetable for {0} {1}, group: {2}'.format(username, chat_id, group)
        logger.info(logMsg)
        sendTimetable(chat_id, day, group_id)
    else:
        logMsg = 'Undefined behaviour for callback query({0})'.format(data)
        logger.error(logMsg)


def sendTimetable(chat_id, day, group_id, daily=False):
    data = dbc.get_timetable(day, group_id)
    group = dbc.get_group_by_id(group_id)
    text = ''
    if not data == []:
        text = '\t**{0}**\t {1}'.format(dayofweek[day], group)
    else:
        text = '–ù–∞–∂–∞–ª—å —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö üòî'
    prev_row = (0, '', '')
    for row in data:
        num, subj_name, auditory, class_type, alternation, lector = row

        number = emoji[row[0]]

        if prev_row == (num, subj_name, auditory):
            text = text + ', ' + lector
            continue

        prev_row = (num, subj_name, auditory)

        if auditory is not None:
            auditory = ' ' + auditory + ' –∞—É–¥.'
        else:
            auditory = ''

        if alternation is not None:
            alternation = '(' + row[-1] + ')'
        else:
            alternation = ''

        if lector is not None:
            lector = '\n' + lector
        else:
            lector = ''

        if not daily:
            text = text + '\n\n{0} –ø–∞—Ä–∞ - {1}, {2} {3} {4} {5}'\
                .format(number, subj_name, class_type, auditory, alternation, lector)
        else:
            d = datetime.now()
            if d.isocalendar()[1] % 2 == 1 and alternation == '(—á–∏—Å–µ–ª—å–Ω–∏–∫)':
                pass
            elif d.isocalendar()[1] % 2 == 0 and alternation == '(–∑–Ω–∞–º–µ–Ω–Ω–∏–∫)':
                pass
            else:
                text = text + '\n\n{0} –ø–∞—Ä–∞ - {1}, {2} {3} {4} {5}' \
                    .format(number, subj_name, class_type, auditory, alternation, lector)

    sendMessage(chat_id, text)


def makeButtons(callbackText='', number=3, buttonsArray=[]):
    arrays = []
    array = []
    while buttonsArray.__len__() > 0:
        text = buttonsArray[0]
        #–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
        if callbackText == 'facultet_':
            callbackData = callbackText + dbc.get_facultet_id(buttonsArray[0])

        #–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫—É—Ä—Å—É
        elif re.search(r'^\w+_course_$', callbackText):
            text = buttonsArray[0] + ' –∫—É—Ä—Å'
            callbackData = callbackText + buttonsArray[0]
            if buttonsArray[0] == '<< –ù–∞–∑–∞–¥':
                callbackData = 'course_back'
                text = '<< –ù–∞–∑–∞–¥'

        #–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –≥—Ä—É–ø–∏
        elif re.search(r'^\w+_course_[1-6]_$', callbackText):
            callbackData = callbackText + str(dbc.get_group_id(text))
            if text == '<< –ù–∞–∑–∞–¥':
                callbackData = callbackText + 'back'

        #–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è —Ç–∏–∂–Ω—è
        elif re.search(r'^\w+_course_[1-6]_\d+_$', callbackText):
            callbackData = callbackText + text
            if text == '<< –ù–∞–∑–∞–¥':
                callbackData = callbackText + 'back'

        else:
            callbackData = str(callbackText) + str(buttonsArray[0])
            if text == '<< –ù–∞–∑–∞–¥':
                callbackData = callbackText + 'back'


        array.append({'text': text, 'callback_data': callbackData})
        buttonsArray.pop(0)
        if array.__len__() == number:
            arrays.append(array)
            array = []
    if array.__len__() > 0:
        arrays.append(array)

    reply = {'inline_keyboard': arrays}
    return reply


def sendDailyTimetable():
    d = datetime.now()
    if d.strftime('%A') in dowENUA:
        users = dbc.get_users()
        for user in users:
            sendTimetable(user[1], dowENUA[d.strftime('%A')], user[2], daily = True)
